import { combineLatest, merge, of, ReplaySubject, Subscription } from 'rxjs';
import { map } from 'rxjs/operators';
import { MatTableDataSource } from '@angular/material/table';
export class TableVirtualScrollDataSource extends MatTableDataSource {
    _updateChangeSubscription() {
        this.initStreams();
        const _sort = this['_sort'];
        const _paginator = this['_paginator'];
        const _internalPageChanges = this['_internalPageChanges'];
        const _filter = this['_filter'];
        const _renderData = this['_renderData'];
        const sortChange = _sort ?
            merge(_sort.sortChange, _sort.initialized) :
            of(null);
        const pageChange = _paginator ?
            merge(_paginator.page, _internalPageChanges, _paginator.initialized) :
            of(null);
        const dataStream = this['_data'];
        const filteredData = combineLatest([dataStream, _filter])
            .pipe(map(([data]) => this._filterData(data)));
        const orderedData = combineLatest([filteredData, sortChange])
            .pipe(map(([data]) => this._orderData(data)));
        const paginatedData = combineLatest([orderedData, pageChange])
            .pipe(map(([data]) => this._pageData(data)));
        this._renderChangesSubscription?.unsubscribe();
        this._renderChangesSubscription = new Subscription();
        this._renderChangesSubscription.add(paginatedData.subscribe(data => this.dataToRender$.next(data)));
        this._renderChangesSubscription.add(this.dataOfRange$.subscribe(data => _renderData.next(data)));
    }
    initStreams() {
        if (!this.streamsReady) {
            this.dataToRender$ = new ReplaySubject(1);
            this.dataOfRange$ = new ReplaySubject(1);
            this.streamsReady = true;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtZGF0YS1zb3VyY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy10YWJsZS12aXJ0dWFsLXNjcm9sbC9zcmMvbGliL3RhYmxlLWRhdGEtc291cmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBbUIsYUFBYSxFQUFFLEtBQUssRUFBYyxFQUFFLEVBQUUsYUFBYSxFQUFXLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNuSCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFJN0QsTUFBTSxPQUFPLDRCQUFnQyxTQUFRLGtCQUFxQjtJQUt4RSx5QkFBeUI7UUFDdkIsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ25CLE1BQU0sS0FBSyxHQUFtQixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDNUMsTUFBTSxVQUFVLEdBQXdCLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMzRCxNQUFNLG9CQUFvQixHQUFrQixJQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUN6RSxNQUFNLE9BQU8sR0FBNEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3pELE1BQU0sV0FBVyxHQUF5QixJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFOUQsTUFBTSxVQUFVLEdBQW1DLEtBQUssQ0FBQyxDQUFDO1lBQ3hELEtBQUssQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxXQUFXLENBQTRCLENBQUMsQ0FBQztZQUN2RSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDWCxNQUFNLFVBQVUsR0FBd0MsVUFBVSxDQUFDLENBQUM7WUFDbEUsS0FBSyxDQUNILFVBQVUsQ0FBQyxJQUFJLEVBQ2Ysb0JBQW9CLEVBQ3BCLFVBQVUsQ0FBQyxXQUFXLENBQ1MsQ0FBQyxDQUFDO1lBQ25DLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNYLE1BQU0sVUFBVSxHQUFvQixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbEQsTUFBTSxZQUFZLEdBQUcsYUFBYSxDQUFDLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO2FBQ3RELElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqRCxNQUFNLFdBQVcsR0FBRyxhQUFhLENBQUMsQ0FBQyxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUM7YUFDMUQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hELE1BQU0sYUFBYSxHQUFHLGFBQWEsQ0FBQyxDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQzthQUMzRCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFL0MsSUFBSSxDQUFDLDBCQUEwQixFQUFFLFdBQVcsRUFBRSxDQUFDO1FBQy9DLElBQUksQ0FBQywwQkFBMEIsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3JELElBQUksQ0FBQywwQkFBMEIsQ0FBQyxHQUFHLENBQ2pDLGFBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUMvRCxDQUFDO1FBQ0YsSUFBSSxDQUFDLDBCQUEwQixDQUFDLEdBQUcsQ0FDakMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQzVELENBQUM7SUFDSixDQUFDO0lBRU8sV0FBVztRQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUN0QixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksYUFBYSxDQUFNLENBQUMsQ0FBQyxDQUFDO1lBQy9DLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxhQUFhLENBQU0sQ0FBQyxDQUFDLENBQUM7WUFDOUMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7U0FDMUI7SUFDSCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIGNvbWJpbmVMYXRlc3QsIG1lcmdlLCBPYnNlcnZhYmxlLCBvZiwgUmVwbGF5U3ViamVjdCwgU3ViamVjdCwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBNYXRUYWJsZURhdGFTb3VyY2UgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC90YWJsZSc7XG5pbXBvcnQgeyBNYXRTb3J0LCBTb3J0IH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvc29ydCc7XG5pbXBvcnQgeyBNYXRQYWdpbmF0b3IsIFBhZ2VFdmVudCB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3BhZ2luYXRvcic7XG5cbmV4cG9ydCBjbGFzcyBUYWJsZVZpcnR1YWxTY3JvbGxEYXRhU291cmNlPFQ+IGV4dGVuZHMgTWF0VGFibGVEYXRhU291cmNlPFQ+IHtcbiAgcHVibGljIGRhdGFUb1JlbmRlciQ6IFN1YmplY3Q8VFtdPjtcbiAgcHVibGljIGRhdGFPZlJhbmdlJDogU3ViamVjdDxUW10+O1xuICBwcml2YXRlIHN0cmVhbXNSZWFkeTogYm9vbGVhbjtcblxuICBfdXBkYXRlQ2hhbmdlU3Vic2NyaXB0aW9uKCkge1xuICAgIHRoaXMuaW5pdFN0cmVhbXMoKTtcbiAgICBjb25zdCBfc29ydDogTWF0U29ydCB8IG51bGwgPSB0aGlzWydfc29ydCddO1xuICAgIGNvbnN0IF9wYWdpbmF0b3I6IE1hdFBhZ2luYXRvciB8IG51bGwgPSB0aGlzWydfcGFnaW5hdG9yJ107XG4gICAgY29uc3QgX2ludGVybmFsUGFnZUNoYW5nZXM6IFN1YmplY3Q8dm9pZD4gPSB0aGlzWydfaW50ZXJuYWxQYWdlQ2hhbmdlcyddO1xuICAgIGNvbnN0IF9maWx0ZXI6IEJlaGF2aW9yU3ViamVjdDxzdHJpbmc+ID0gdGhpc1snX2ZpbHRlciddO1xuICAgIGNvbnN0IF9yZW5kZXJEYXRhOiBCZWhhdmlvclN1YmplY3Q8VFtdPiA9IHRoaXNbJ19yZW5kZXJEYXRhJ107XG5cbiAgICBjb25zdCBzb3J0Q2hhbmdlOiBPYnNlcnZhYmxlPFNvcnQgfCBudWxsIHwgdm9pZD4gPSBfc29ydCA/XG4gICAgICBtZXJnZShfc29ydC5zb3J0Q2hhbmdlLCBfc29ydC5pbml0aWFsaXplZCkgYXMgT2JzZXJ2YWJsZTxTb3J0IHwgdm9pZD4gOlxuICAgICAgb2YobnVsbCk7XG4gICAgY29uc3QgcGFnZUNoYW5nZTogT2JzZXJ2YWJsZTxQYWdlRXZlbnQgfCBudWxsIHwgdm9pZD4gPSBfcGFnaW5hdG9yID9cbiAgICAgIG1lcmdlKFxuICAgICAgICBfcGFnaW5hdG9yLnBhZ2UsXG4gICAgICAgIF9pbnRlcm5hbFBhZ2VDaGFuZ2VzLFxuICAgICAgICBfcGFnaW5hdG9yLmluaXRpYWxpemVkXG4gICAgICApIGFzIE9ic2VydmFibGU8UGFnZUV2ZW50IHwgdm9pZD4gOlxuICAgICAgb2YobnVsbCk7XG4gICAgY29uc3QgZGF0YVN0cmVhbTogT2JzZXJ2YWJsZTxUW10+ID0gdGhpc1snX2RhdGEnXTtcbiAgICBjb25zdCBmaWx0ZXJlZERhdGEgPSBjb21iaW5lTGF0ZXN0KFtkYXRhU3RyZWFtLCBfZmlsdGVyXSlcbiAgICAgIC5waXBlKG1hcCgoW2RhdGFdKSA9PiB0aGlzLl9maWx0ZXJEYXRhKGRhdGEpKSk7XG4gICAgY29uc3Qgb3JkZXJlZERhdGEgPSBjb21iaW5lTGF0ZXN0KFtmaWx0ZXJlZERhdGEsIHNvcnRDaGFuZ2VdKVxuICAgICAgLnBpcGUobWFwKChbZGF0YV0pID0+IHRoaXMuX29yZGVyRGF0YShkYXRhKSkpO1xuICAgIGNvbnN0IHBhZ2luYXRlZERhdGEgPSBjb21iaW5lTGF0ZXN0KFtvcmRlcmVkRGF0YSwgcGFnZUNoYW5nZV0pXG4gICAgICAucGlwZShtYXAoKFtkYXRhXSkgPT4gdGhpcy5fcGFnZURhdGEoZGF0YSkpKTtcblxuICAgIHRoaXMuX3JlbmRlckNoYW5nZXNTdWJzY3JpcHRpb24/LnVuc3Vic2NyaWJlKCk7XG4gICAgdGhpcy5fcmVuZGVyQ2hhbmdlc1N1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICB0aGlzLl9yZW5kZXJDaGFuZ2VzU3Vic2NyaXB0aW9uLmFkZChcbiAgICAgIHBhZ2luYXRlZERhdGEuc3Vic2NyaWJlKGRhdGEgPT4gdGhpcy5kYXRhVG9SZW5kZXIkLm5leHQoZGF0YSkpXG4gICAgKTtcbiAgICB0aGlzLl9yZW5kZXJDaGFuZ2VzU3Vic2NyaXB0aW9uLmFkZChcbiAgICAgIHRoaXMuZGF0YU9mUmFuZ2UkLnN1YnNjcmliZShkYXRhID0+IF9yZW5kZXJEYXRhLm5leHQoZGF0YSkpXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdFN0cmVhbXMoKSB7XG4gICAgaWYgKCF0aGlzLnN0cmVhbXNSZWFkeSkge1xuICAgICAgdGhpcy5kYXRhVG9SZW5kZXIkID0gbmV3IFJlcGxheVN1YmplY3Q8VFtdPigxKTtcbiAgICAgIHRoaXMuZGF0YU9mUmFuZ2UkID0gbmV3IFJlcGxheVN1YmplY3Q8VFtdPigxKTtcbiAgICAgIHRoaXMuc3RyZWFtc1JlYWR5ID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==